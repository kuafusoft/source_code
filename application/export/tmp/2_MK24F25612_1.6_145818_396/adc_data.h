/*Device: MK24F25612
 Version: 1.6
 Description: MK24F25612 Freescale Microcontroller
*/


#include "../chip/chip.h"
#include "../inc/logic.h"


struct DATA ADC_REG_DATA[] = {
	{OFFSET(CRC_MemMap,DATA), 0},
	{OFFSET(CRC_MemMap,GPOLY), 4},
	{OFFSET(CRC_MemMap,CTRL), 8},
	{sizeof(struct CRC_MemMap), 12}
};

struct DATA ADC_BITFIELD_DATA[] = {
	{CRC_DATALL_DATALL_MASK, MASK(0,8)},
	{CRC_DATALL_DATALL_SHIFT, SHIFT(0)},
	{CRC_DATALL_DATALL(1), SHIFT_VALUE(0)}
,
	{CRC_DATA_LL_MASK, MASK(0,8)},
	{CRC_DATA_LL_SHIFT, SHIFT(0)},
	{CRC_DATA_LL(1), SHIFT_VALUE(0)}
,
	{CRC_DATA_LU_MASK, MASK(8,8)},
	{CRC_DATA_LU_SHIFT, SHIFT(8)},
	{CRC_DATA_LU(1), SHIFT_VALUE(8)}
,
	{CRC_DATA_HL_MASK, MASK(16,8)},
	{CRC_DATA_HL_SHIFT, SHIFT(16)},
	{CRC_DATA_HL(1), SHIFT_VALUE(16)}
,
	{CRC_DATA_HU_MASK, MASK(24,8)},
	{CRC_DATA_HU_SHIFT, SHIFT(24)},
	{CRC_DATA_HU(1), SHIFT_VALUE(24)}
,
	{CRC_DATAL_DATAL_MASK, MASK(0,16)},
	{CRC_DATAL_DATAL_SHIFT, SHIFT(0)},
	{CRC_DATAL_DATAL(1), SHIFT_VALUE(0)}
,
	{CRC_DATALU_DATALU_MASK, MASK(0,8)},
	{CRC_DATALU_DATALU_SHIFT, SHIFT(0)},
	{CRC_DATALU_DATALU(1), SHIFT_VALUE(0)}
,
	{CRC_DATAHL_DATAHL_MASK, MASK(0,8)},
	{CRC_DATAHL_DATAHL_SHIFT, SHIFT(0)},
	{CRC_DATAHL_DATAHL(1), SHIFT_VALUE(0)}
,
	{CRC_DATAH_DATAH_MASK, MASK(0,16)},
	{CRC_DATAH_DATAH_SHIFT, SHIFT(0)},
	{CRC_DATAH_DATAH(1), SHIFT_VALUE(0)}
,
	{CRC_DATAHU_DATAHU_MASK, MASK(0,8)},
	{CRC_DATAHU_DATAHU_SHIFT, SHIFT(0)},
	{CRC_DATAHU_DATAHU(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLY_LOW_MASK, MASK(0,16)},
	{CRC_GPOLY_LOW_SHIFT, SHIFT(0)},
	{CRC_GPOLY_LOW(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLY_HIGH_MASK, MASK(16,16)},
	{CRC_GPOLY_HIGH_SHIFT, SHIFT(16)},
	{CRC_GPOLY_HIGH(1), SHIFT_VALUE(16)}
,
	{CRC_GPOLYLL_GPOLYLL_MASK, MASK(0,8)},
	{CRC_GPOLYLL_GPOLYLL_SHIFT, SHIFT(0)},
	{CRC_GPOLYLL_GPOLYLL(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLYL_GPOLYL_MASK, MASK(0,16)},
	{CRC_GPOLYL_GPOLYL_SHIFT, SHIFT(0)},
	{CRC_GPOLYL_GPOLYL(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLYLU_GPOLYLU_MASK, MASK(0,8)},
	{CRC_GPOLYLU_GPOLYLU_SHIFT, SHIFT(0)},
	{CRC_GPOLYLU_GPOLYLU(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLYH_GPOLYH_MASK, MASK(0,16)},
	{CRC_GPOLYH_GPOLYH_SHIFT, SHIFT(0)},
	{CRC_GPOLYH_GPOLYH(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLYHL_GPOLYHL_MASK, MASK(0,8)},
	{CRC_GPOLYHL_GPOLYHL_SHIFT, SHIFT(0)},
	{CRC_GPOLYHL_GPOLYHL(1), SHIFT_VALUE(0)}
,
	{CRC_GPOLYHU_GPOLYHU_MASK, MASK(0,8)},
	{CRC_GPOLYHU_GPOLYHU_SHIFT, SHIFT(0)},
	{CRC_GPOLYHU_GPOLYHU(1), SHIFT_VALUE(0)}
,
	{CRC_CTRL_TCRC_MASK, MASK(24,1)},
	{CRC_CTRL_TCRC_SHIFT, SHIFT(24)},
	{CRC_CTRL_WAS_MASK, MASK(25,1)},
	{CRC_CTRL_WAS_SHIFT, SHIFT(25)},
	{CRC_CTRL_FXOR_MASK, MASK(26,1)},
	{CRC_CTRL_FXOR_SHIFT, SHIFT(26)},
	{CRC_CTRL_TOTR_MASK, MASK(28,2)},
	{CRC_CTRL_TOTR_SHIFT, SHIFT(28)},
	{CRC_CTRL_TOTR(1), SHIFT_VALUE(28)}
,
	{CRC_CTRL_TOT_MASK, MASK(30,2)},
	{CRC_CTRL_TOT_SHIFT, SHIFT(30)},
	{CRC_CTRL_TOT(1), SHIFT_VALUE(30)}
,
	{CRC_CTRLHU_TCRC_MASK, MASK(0,1)},
	{CRC_CTRLHU_TCRC_SHIFT, SHIFT(0)},
	{CRC_CTRLHU_WAS_MASK, MASK(1,1)},
	{CRC_CTRLHU_WAS_SHIFT, SHIFT(1)},
	{CRC_CTRLHU_FXOR_MASK, MASK(2,1)},
	{CRC_CTRLHU_FXOR_SHIFT, SHIFT(2)},
	{CRC_CTRLHU_TOTR_MASK, MASK(4,2)},
	{CRC_CTRLHU_TOTR_SHIFT, SHIFT(4)},
	{CRC_CTRLHU_TOTR(1), SHIFT_VALUE(4)}
,
	{CRC_CTRLHU_TOT_MASK, MASK(6,2)},
	{CRC_CTRLHU_TOT_SHIFT, SHIFT(6)},
	{CRC_CTRLHU_TOT(1), SHIFT_VALUE(6)}

};